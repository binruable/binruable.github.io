<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>APP远程升级</title>
    <link href="/2025/03/25/APP%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7/"/>
    <url>/2025/03/25/APP%E8%BF%9C%E7%A8%8B%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="一、远程更新原理"><a href="#一、远程更新原理" class="headerlink" title="一、远程更新原理"></a>一、远程更新原理</h2><p>远程更新的本质就是就是通过接口获取数据并进行处理。主要分为以下三步：</p><ol><li>开发后台服务接口，接口提供上传APP、下载APP、获取版本号、获取更新内容等。</li><li>APP本地发起http请求，比较本地版本与远程版本。</li><li>如果本地版本小于远程版本，http返回需要更新flag，反之提示已处于最新状态。</li><li>当接收到需要更新信号，APP弹出更新界面，用户选择自行选择更新与否。</li></ol><h2 id="二、实现步骤"><a href="#二、实现步骤" class="headerlink" title="二、实现步骤"></a>二、实现步骤</h2><ol><li>在服务器端设置一个API接口，用来返回最新版本的信息，包括版本号和下载地址。</li><li>在应用中添加检查更新的逻辑，请求服务器接口获取最新版本信息。</li><li>如果有新版本，提示用户进行下载，并调用系统安装器进行安装。</li></ol><h2 id="三、Android应用端代码"><a href="#三、Android应用端代码" class="headerlink" title="三、Android应用端代码"></a>三、Android应用端代码</h2><ol><li>getAndroidAppInfo() 获取android app versioncode（如10101），后续根据该code判断软件版本状态，versionName：1.01.01；pkName：org.sg.zt_gc；channelNumber：aCom</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAndroidAppInfo</span>(<span class="hljs-params"></span>)<br>&#123;<br>    …<br>    <span class="hljs-keyword">return</span> versioncode + <span class="hljs-string">&quot;,&quot;</span>+versionName+ <span class="hljs-string">&quot;,&quot;</span>+pkName+ <span class="hljs-string">&quot;,&quot;</span>+channelNumber;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>installApk</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">installApk</span> <span class="hljs-params">(<span class="hljs-type">String</span> filePath)</span></span><br><span class="hljs-function"></span>&#123;<br>    …<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、QT端代码"><a href="#四、QT端代码" class="headerlink" title="四、QT端代码"></a>四、QT端代码</h2><p>检测到本地版本低于服务器版本<br><img src="/img/0012.png"><br>点击更新，下载安装包<br><img src="/img/0013.png"><br>更新完成后即可安装<br><img src="/img/0014.png"><br>流程如下：<br><img src="/img/0015.png"></p><h2 id="五、installAPK"><a href="#五、installAPK" class="headerlink" title="五、installAPK"></a>五、installAPK</h2><p>java代码</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake">reqInstallPermission();   // 检查是否有权限，如无权限，跳转到该应用的安装应用的权限页面<br><span class="hljs-keyword">File</span> updateFile = new <span class="hljs-keyword">File</span>(filePath);<br>Intent <span class="hljs-keyword">install</span> = new Intent(Intent.ACTION_VIEW);<br><span class="hljs-keyword">install</span>.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br><span class="hljs-keyword">install</span>.setDataAndType(Uri.fromFile(updateFile),<span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>_instance.startActivity(<span class="hljs-keyword">install</span>);<br></code></pre></td></tr></table></figure><p>上面方式简单粗暴，只需要获取安装权限，拥有访问权限，知晓APK位置即可，该方式只在android 7以及以下有效。<br><img src="/img/0016.png"><br>我们平台使用的是android 9，安装apk方式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmake">reqInstallPermission(); // 检查是否有权限，如无权限，跳转到该应用的安装应用的权限页面<br><span class="hljs-keyword">File</span> updateFile = new <span class="hljs-keyword">File</span>(filePath);<br>// <span class="hljs-number">7.0</span>以上，已授权 则 通过 FileProvider 打开对应文件目录的安装文件<br>Uri apkUri = FileProvider.getUriForFile(_instance,_instance.getPackageName()+<span class="hljs-string">&quot;.fileprovider&quot;</span>, updateFile);<br>Intent <span class="hljs-keyword">install</span> = new Intent(Intent.ACTION_VIEW);<br><span class="hljs-keyword">install</span>.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br><span class="hljs-keyword">install</span>.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);<br><span class="hljs-keyword">install</span>.setDataAndType(apkUri, <span class="hljs-string">&quot;application/vnd.android.package-archive&quot;</span>);<br>_instance.startActivity(<span class="hljs-keyword">install</span>);<br></code></pre></td></tr></table></figure><pre><code class="hljs">在android版本不断提高的趋势下，系统安全越来越高，很多权限不只在清单文件里面注册那么简单，安装软件需要内存卡读写权限，属于危险权限，需要使用动态代码添加。如何将私有数据暴露给PackageInstaller，android7.0以后，开放暴露私有数据的唯一方式是通过ContentProvider来实现，具体步骤如下：</code></pre><ol><li>   配置 AndroidManifest.xml 中的 ContentProvider 信息；</li><li>   配置要开放的 paths 信息；</li><li>   在 Java 代码中通过 FileProvider 封装文件信息。</li></ol><p>AndroidManifest.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;androidx.core.content.FileProvider&quot;</span> <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;org.sg.zt_gc.fileprovider&quot;</span> <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span> <span class="hljs-attr">android:resource</span>=<span class="hljs-string">&quot;@xml/provider_paths&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>android:name 属性填写的是 FileProvider 类的完整名称。<br>android:authorities属性就是和普通的 ContentProvider 一样的用于访问文件资源的 uri 标签头。值内容根据实际需要来填写即可。<br>android:exported这个属性表示的是：其他app能否访问这个provider<br>android:grantUriPermissions 这个属性用于给内容提供器的数据子集授权。如果内容提供器的grantUriPermissions属性被设置为true，那么权限能够被授予内容提供器范围内的任何数据。但是，如果grantUriPermission属性被设置为false，那么权限就只能授予这个元素所指定的数据子集。一个内容提供器能够包含任意多个元素。每个都只能指定一个路径（三个可能属性中的一个）。<br>meta-data 标签中的内容需要关注的是 android:resource 属性中的内容。这个属性的值引向一个自行配置的 xml 文件，这份 xml 文件记载的是设备中的路径信息，简单理解就是你想开放哪些目录中的文件资源给第三方使用的意思。关于这个 xml 的配置请看第 2 步的记载。</p></blockquote><p>paths配置</p><p><img src="/img/0017.png"></p><p>通常的做法是在工程 res 目录下新建一个 xml 目录，并在该 xml 目录下新建一个 xml 文件。文件的名称必须与第 1 步中 @xml&#x2F; 属性值中配置的一致。</p><p><img src="/img/0018.png"></p><p>Java代码配置<br>Java 代码的配置就没什么特别的了，关键的代码其实只有一行：<br>FileProvider.getUriForFile(_instance,_instance.getPackageName()+”.fileprovider”, updateFile);</p><ol><li>context：_instance, 这里需要传入一个上下文</li><li>authority：可以通代码在AndroidManifest.xml里面获得</li><li>file：是你需要的安装的文件</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于QGC的自制地面站设计</title>
    <link href="/2024/05/10/%E5%AE%9A%E5%88%B6%E5%9C%B0%E9%9D%A2%E7%AB%99/"/>
    <url>/2024/05/10/%E5%AE%9A%E5%88%B6%E5%9C%B0%E9%9D%A2%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="自研旧版SGGC"><a href="#自研旧版SGGC" class="headerlink" title="自研旧版SGGC"></a>自研旧版SGGC</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="/img/0001.png"></p><h3 id="飞行规划界面"><a href="#飞行规划界面" class="headerlink" title="飞行规划界面"></a>飞行规划界面</h3><p><img src="/img/0002.png"></p><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><p><img src="/img/0003.png"><br><img src="/img/0004.png"></p><h2 id="新版SGGC"><a href="#新版SGGC" class="headerlink" title="新版SGGC"></a>新版SGGC</h2><h3 id="进入界面"><a href="#进入界面" class="headerlink" title="进入界面"></a>进入界面</h3><p><img src="/img/0006.png"></p><h3 id="飞行界面"><a href="#飞行界面" class="headerlink" title="飞行界面"></a>飞行界面</h3><p><img src="/img/0007.png"></p><h3 id="起飞界面"><a href="#起飞界面" class="headerlink" title="起飞界面"></a>起飞界面</h3><p><img src="/img/0008.png"></p><h3 id="设置界面-1"><a href="#设置界面-1" class="headerlink" title="设置界面"></a>设置界面</h3><p><img src="/img/0009.png"></p><h3 id="飞行规划界面-1"><a href="#飞行规划界面-1" class="headerlink" title="飞行规划界面"></a>飞行规划界面</h3><p><img src="/img/0011.png"></p><h3 id="航点规划界面"><a href="#航点规划界面" class="headerlink" title="航点规划界面"></a>航点规划界面</h3><p><img src="/img/0005.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AMS光纤协议解析</title>
    <link href="/2024/01/18/FC-AE-ASM/"/>
    <url>/2024/01/18/FC-AE-ASM/</url>
    
    <content type="html"><![CDATA[<h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><table><thead><tr><th align="center"><a href="#my-anchor1">SOF</a></th><th align="center"><a href="#my-anchor2">帧头</a></th><th align="center"><a href="#my-anchor3">ASM头</a></th><th align="center"><a href="#my-anchor4">有效载荷</a></th><th align="center"><a href="#crc">CRC</a></th><th align="center"><a href="#my-anchor1">EOF</a></th></tr></thead><tbody><tr><td align="center">4</td><td align="center">24</td><td align="center">16</td><td align="center">2096</td><td align="center">4</td><td align="center">4</td></tr></tbody></table><h3 id="SOF和EOF"><a href="#SOF和EOF" class="headerlink" title="SOF和EOF"></a><a name="my-anchor1">SOF和EOF</a></h3><p>正常一个FC帧最大为2148B，一个包超过2148B就需要拆分为多个FC帧</p><p>，此处的信息包和数据包均为拆分2个FC帧，则第一个FC帧此处为SOFi，</p><p>第二个为SOFn，即拆分后的<mark>第一个FC帧为SOFi，其余为SOFn</mark>.</p><p>正常一个FC帧最大为2148B，一个包超过2148B就需要拆分为多个FC帧</p><p>，此处的信息包和数据包均为拆分2个FC帧，则第一个FC帧此处为EOFn，</p><p>第二个为EOFt，即拆分后的<mark>最后一个FC帧为EOFt ，其余为EOFn</mark>.</p><p>localparam SOF_I3  &#x3D; {K28_5,D21_5,D22_2,D22_2};&#x2F;&#x2F;bc b5 56 56</p><p>localparam SOF_N3  &#x3D; {K28_5,D21_5,D22_1,D22_1};&#x2F;&#x2F;bc b5 36 36</p><p>localparam EOF_TRN &#x3D; {K28_5,D21_4,D21_3,D21_3};&#x2F;&#x2F;bc 95 75 75</p><p>localparam EOF_TRP &#x3D; {K28_5,D21_5,D21_3,D21_3};&#x2F;&#x2F;bc b5 75 75</p><p>localparam EOF_NMN &#x3D; {K28_5,D21_4,D21_6,D21_6};&#x2F;&#x2F;bc 95 d5 d5</p><p>localparam EOF_NMP &#x3D; {K28_5,D21_5,D21_6,D21_6};&#x2F;&#x2F;bc b5 d5 d5</p><h3 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a><a name="crc">CRC</a></h3><p>CRC计算：除SOF、CRC和EOF外的所有字节作相关计算得出CRC值</p><p>假设值为[31:0]&#x3D;01 02 03 04</p><p>则CRC填写值为[31:0]&#x3D;04 03 02 01</p><p>后期设置为大小端可调用作测试</p><h3 id="帧头"><a href="#帧头" class="headerlink" title="帧头"></a><a name="my-anchor2">帧头</a></h3><p><img src="/img/zhentou1.png"></p><table><thead><tr><th>高位</th><th></th><th></th><th>低位</th><th>含义</th></tr></thead><tbody><tr><td>04</td><td>FF</td><td>FB</td><td>27</td><td>组播地址，需可配，适应不同视频，不同机柜</td></tr><tr><td>00</td><td>01</td><td>00</td><td>15</td><td>区域端口序号，同上</td></tr><tr><td>49</td><td>32&#x2F;3a</td><td>00</td><td>00</td><td>①第一包32，后面包3a</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00&#x2F;01</td><td>②SEQ_CNT应该00&#x2F;01跳动</td></tr><tr><td>83</td><td>1e</td><td>FF</td><td>FF</td><td>OX_ID推断为递增数，可从0x00开始</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>参数</td></tr></tbody></table><p>正常一个FC帧最大为2148B，一个包超过2148B就需要拆分为多个FC帧<br>，此处的信息包和数据包均为拆分2个FC帧，则第一个FC帧此处为00，<br>第二个为01，即拆分后的第一个FC帧为00，然后递增，传输至下一个包后置0.</p><h3 id="ASM帧头"><a href="#ASM帧头" class="headerlink" title="ASM帧头"></a><a name="my-anchor3">ASM帧头</a></h3><p><img src="/img/%E5%9B%BE%E7%89%871.png"></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>高位</td><td></td><td></td><td>低位</td><td>含义</td></tr><tr><td>01</td><td>00</td><td>00</td><td>27</td><td>消息ID,需可配，适应不同视频，不同机柜</td></tr><tr><td>31</td><td>00</td><td>80</td><td>00</td><td>安全字段最高一个字节递增</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>保留字段必须为0，修改会导致FC分析仪提示警告</td></tr><tr><td>00 00</td><td>00 00</td><td>0a 0f</td><td>24 24</td><td>包长2596或者1920*2+36</td></tr></tbody></table><p>此处是指有效数据长度，信息包和1280视频字节数一致，此处填写<br>0x0a24，1920视频填写0x0f24。<br>此处的信息包和数据包均为拆分2个FC帧，则第一 个FC帧此处为0x0a24，<br>第二个可为0x00，即在首个FC帧中填写即可.</p><h3 id="有效负荷"><a href="#有效负荷" class="headerlink" title="有效负荷"></a><a name="my-anchor4">有效负荷</a></h3><p><img src="/img/%E5%9B%BE%E7%89%873.png"><br>这里分为信息帧和数据帧<br>SOF 0xbc050505<br>EOF 0xbc060606</p><p>有效数据<br><img src="/img/%E5%9B%BE%E7%89%875.png"><br>信息帧有效负荷</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>高位</td><td></td><td></td><td>低位</td><td>含义</td></tr><tr><td>00</td><td>00</td><td>00</td><td>12</td><td>视频来源,需可配，适应不同视频，不同机柜</td></tr><tr><td>00</td><td>00</td><td>04</td><td>39</td><td>1080+1，此处一行表示1包，信息包为第0包</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>当前包号递增，一行+1</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>帧心跳序号，目前没用到</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr></tbody></table><p>数据帧有效负荷</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>高位</td><td></td><td></td><td>低位</td><td>含义</td></tr><tr><td>FF</td><td>00</td><td>FF</td><td>00</td><td>同步报头</td></tr><tr><td>…</td><td></td><td></td><td></td><td>16个FF00</td></tr><tr><td>00</td><td>00</td><td>00</td><td>12</td><td>视频来源,需可配，适应不同视频，不同机柜</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>像素时钟没用到</td></tr><tr><td>00</td><td>00</td><td>04</td><td>38</td><td>图像行数</td></tr><tr><td>00</td><td>00</td><td>07</td><td>80</td><td>图像列数</td></tr><tr><td>00</td><td>00</td><td>00</td><td>03</td><td>像素格式，和后端约定Y在低位，16位传输</td></tr><tr><td>00</td><td>00</td><td>00</td><td>19</td><td>帧频固定25帧</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>帧计数（递增），每帧+1</td></tr></tbody></table><p>帧头<br><img src="/img/%E5%9B%BE%E7%89%874.png"></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>高位</td><td></td><td></td><td>低位</td><td>含义</td></tr><tr><td>00</td><td>00</td><td>00</td><td>12</td><td>视频来源,需可配，适应不同视频，不同机柜</td></tr><tr><td>00</td><td>00</td><td>04</td><td>39</td><td>1080+1，此处一行表示1包，信息包为第0包</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>当前包号递增，一行+1</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>帧心跳序号，目前没用到</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr><tr><td>00</td><td>00</td><td>00</td><td>00</td><td>预留</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
